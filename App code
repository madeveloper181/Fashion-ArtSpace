package com.example.artworkpace

import WindowInfo
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.gestures.detectHorizontalDragGestures
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.RectangleShape
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.artworkpace.ui.theme.ArtWorkPaceTheme
import kotlinx.coroutines.launch
import rememberWindowInfo

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        setContent {
            ArtWorkPaceTheme {
                val windowInfo = rememberWindowInfo()
                ArtWorkSpaceApp(windowInfo)
            }
        }
    }
}
@Composable
fun ArtWorkSpaceApp(windowInfo: WindowInfo) {
    var artIdNo by remember { mutableStateOf(1) }
    val scope = rememberCoroutineScope()
    val offsetX = remember { Animatable(0f) }
    val dragThresHold = 300f

    val imageResource = when (artIdNo) {
        1 -> R.drawable.mohamad_khosravi_ygj9vfuwyug_unsplash
        2 -> R.drawable.behrouz_sasani_6ogml3uomzw_unsplash
        3 -> R.drawable.mahdi_bafande_qdplxl_j6l0_unsplash
        4 -> R.drawable.mohamad_khosravi_hgyaiyvmwkw_unsplash
        else -> R.drawable.mohamad_khosravi_ygj9vfuwyug_unsplash
    }
    val textResourceTitle = when (artIdNo) {
        1 -> R.string.Title1
        2 -> R.string.Title2
        3 -> R.string.Title3
        else -> R.string.Title4
    }
    val textResourceArtist = when (artIdNo) {
        1 -> R.string.Artist1
        2 -> R.string.Artist2
        3 -> R.string.Artist3
        else -> R.string.Artist4
    }
    val textResourceYearPublished = when (artIdNo) {
        1 -> R.string.yearPublished1
        2 -> R.string.yearPublished2
        3 -> R.string.yearPublished3
        else -> R.string.yearPublished4
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .pointerInput(Unit) {
                detectHorizontalDragGestures (
                    onDragEnd = {
                        scope.launch {
                            offsetX.animateTo(
                                targetValue = 0f,
                                animationSpec = tween(durationMillis = dragThresHold.toInt())
                            )
                        }
                    }
                ){ _, dragAmount ->
                    scope.launch {
                        offsetX.snapTo(offsetX.value + dragAmount)
                        if (offsetX.value > dragThresHold) {
                            artIdNo = if (artIdNo == 1) 4 else artIdNo - 1
                            offsetX.snapTo(0f)
                        } else if(offsetX.value < -dragThresHold) {
                            artIdNo = if (artIdNo == 4) 1 else artIdNo + 1
                            offsetX.snapTo(0f)
                        }
                    }
                }
            },
        horizontalAlignment = Alignment.CenterHorizontally
    )

    {
        val imageModifier = if (windowInfo.screenWidthInfo is WindowInfo.WindowType.Compact) {
            Modifier.aspectRatio(0.7f)
        }
        else if (windowInfo.screenWidthInfo is WindowInfo.WindowType.Medium) {
            Modifier.aspectRatio(1.5f)
        }
        else {
            Modifier.aspectRatio(2.3f)
        }
        Image(

            painter = painterResource(imageResource),
            contentDescription = "",
            modifier = imageModifier
                .padding(start = 20.dp, end = 20.dp, top = 50.dp, bottom = 50.dp)
                .border(shape = RectangleShape, width = 35.dp, color = Color.White)
                .shadow(6.dp)
                .fillMaxWidth()
                .graphicsLayer {translationX = offsetX.value }

        )
        val boxModifier = if (windowInfo.screenWidthInfo is WindowInfo.WindowType.Compact) {
            Modifier.aspectRatio(3.0f)
        }
        else if (windowInfo.screenWidthInfo is WindowInfo.WindowType.Medium) {
            Modifier.aspectRatio(1.5f)
        }
        else {
            Modifier.aspectRatio(12f)
        }
        Box(
            modifier = boxModifier
                .padding(start = 20.dp, end = 20.dp)
                .background(Color.LightGray)
                .fillMaxWidth()
                .wrapContentHeight()
        ) {
            Column(
                modifier = Modifier.padding(24.dp)
            ) {
                Text(
                    text = stringResource(textResourceTitle),
                    fontSize = 24.sp
                )
                Row {
                    Text(
                        text = stringResource(textResourceArtist),
                        fontWeight = FontWeight.Bold
                    )
                    Text(text = stringResource(textResourceYearPublished))
                }
            }
        }

        Row(
            modifier = Modifier
                .padding(25.dp)
                .fillMaxWidth(),
            Arrangement.SpaceBetween,
        ) {
            Button(
                modifier = Modifier
                    .weight(0.5f)
                    .padding(end = 33.dp),
                onClick = {
                    artIdNo = if (artIdNo == 1) 5 else artIdNo -1
                },
            ) {
                Text(text = "Previous")
            }
            Button(
                modifier = Modifier
                    .weight(0.5f)
                    .padding(start = 33.dp),
                onClick = {
                    artIdNo = if (artIdNo == 5) 1 else artIdNo + 1
                },
            ) {
                Text(text = "Next")
            }
        }
    }
}


@Preview(showBackground = true)
@Composable
fun ArtWorkSpacePreview() {
    ArtWorkPaceTheme {
        val windowInfo = rememberWindowInfo()
        ArtWorkSpaceApp(windowInfo)
    }
}
